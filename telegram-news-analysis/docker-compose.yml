services:
  postgres:
    image: postgres:15-alpine
    container_name: telegram_postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telegram_news"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_USER: telegram_news
      POSTGRES_PASSWORD: telegram_password
      POSTGRES_DB: telegram_news
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - telegram_news_network
  llm-light-1:
    build:
      context: ./src/llm
      dockerfile: Dockerfile
    container_name: telegram-news-llm-light-1
    environment:
      - MODEL_PATH=/app/models/openchat-3.5-1210.Q4_K_M.gguf
      - LLAMA_PORT=8080
      - MAX_RETRIES=3
      - RETRY_DELAY=5
      - LLAMA_TIMEOUT=200
      - CONTEXT_SIZE=1024
      - MODEL_TYPE=openchat
      - N_BATCH=512
      - N_THREADS=6
      - ROPE_FREQ_BASE=10000
      - MUL_MAT_Q=1
      - USE_MLOCK=1
    volumes:
      - ./models:/app/models:ro
    ports:
      - "8002:8000"
    deploy:
      resources:
        limits:
          memory: 18G
    restart: unless-stopped
    networks:
      - telegram_news_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 240s
  llm-light-2:
    build:
      context: ./src/llm
      dockerfile: Dockerfile
    container_name: telegram-news-llm-light-2
    environment:
      - MODEL_PATH=/app/models/openchat-3.5-1210.Q4_K_M.gguf
      - LLAMA_PORT=8080
      - MAX_RETRIES=3
      - RETRY_DELAY=5
      - LLAMA_TIMEOUT=200
      - CONTEXT_SIZE=1024
      - MODEL_TYPE=openchat
      - N_BATCH=512
      - N_THREADS=6
      - ROPE_FREQ_BASE=10000
      - MUL_MAT_Q=1
      - USE_MLOCK=1
    volumes:
      - ./models:/app/models:ro
    ports:
      - "8003:8000"
    deploy:
      resources:
        limits:
          memory: 18G
    restart: unless-stopped
    networks:
      - telegram_news_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 240s
  llm-light-3:
    build:
      context: ./src/llm
      dockerfile: Dockerfile
    container_name: telegram-news-llm-light-3
    environment:
      - MODEL_PATH=/app/models/openchat-3.5-1210.Q4_K_M.gguf
      - LLAMA_PORT=8080
      - MAX_RETRIES=3
      - RETRY_DELAY=5
      - LLAMA_TIMEOUT=200
      - CONTEXT_SIZE=1024
      - MODEL_TYPE=openchat
      - N_BATCH=512
      - N_THREADS=6
      - ROPE_FREQ_BASE=10000
      - MUL_MAT_Q=1
      - USE_MLOCK=1
    volumes:
      - ./models:/app/models:ro
    ports:
      - "8004:8000"
    deploy:
      resources:
        limits:
          memory: 25G
    restart: unless-stopped
    networks:
      - telegram_news_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 240s

  llm-heavy:
    build:
      context: ./src/llm
      dockerfile: Dockerfile
    container_name: telegram-news-llm-heavy
    environment:
      - MODEL_PATH=/app/models/solar-10.7b-instruct-v1.0.Q4_K_M.gguf
      - LLAMA_PORT=8080
      - MAX_RETRIES=3
      - RETRY_DELAY=5
      - LLAMA_TIMEOUT=600
      - MAX_TOKENS_DEFAULT=4000
      - CONTEXT_SIZE=6000
      - MODEL_TYPE=solar
      - IS_HEAVY=true
      - N_BATCH=512
      - N_THREADS=6
      - ROPE_FREQ_BASE=10000
      - MUL_MAT_Q=1
      - USE_MLOCK=1
    volumes:
      - ./models:/app/models:ro
      - ./tmp/llm:/tmp
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          memory: 50G
    restart: unless-stopped
    networks:
      - telegram_news_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 240s
    ulimits:
      memlock:
        soft: -1
        hard: -1
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "3"



  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/9092'"]
      interval: 1s
      timeout: 60s
      retries: 60
    networks:
      - telegram_news_network

  mongodb:
    image: mongo:5.0
    container_name: telegram_mongodb
    restart: unless-stopped
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok || db.adminCommand("ping").ok' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - telegram_news_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: telegram-news-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 180s
    networks:
      - telegram_news_network

  collector:
    build:
      context: ./src/collector
      dockerfile: Dockerfile
    container_name: telegram-news-collector
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=telegram_news
      - MONGODB_URI=mongodb://mongodb:27017
    volumes:
      - telegram_sessions:/app/sessions
    networks:
      - telegram_news_network

  spark-master:
    image: bitnami/spark:3.5
    container_name: spark-master
    ports:
      - "8081:8080"
      - "7077:7077"
    environment:
      - JAVA_HOME=/opt/bitnami/java
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - spark-master-logs:/opt/bitnami/spark/logs
    restart: unless-stopped
    networks:
      - telegram_news_network

  spark-worker:
    image: bitnami/spark:3.5
    container_name: spark-worker
    depends_on:
      - spark-master
      - kafka
    environment:
      - JAVA_HOME=/opt/bitnami/java 
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=10g
      - SPARK_WORKER_CORES=4
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8082:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - spark-worker-logs:/opt/bitnami/spark/logs
    restart: unless-stopped
    networks:
      - telegram_news_network

  processor:
    build:
      context: ./src/processor
      dockerfile: Dockerfile
    container_name: telegram-news-processor
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
      llm-light-1:
        condition: service_healthy
      llm-light-2:
        condition: service_healthy
      llm-light-3:
        condition: service_healthy
      llm-heavy:
        condition: service_healthy
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - KAFKA_BROKERS=kafka:9092
      - CONNECTION_TIMEOUT=120
      - POSTGRES_URI=postgresql://telegram_news:telegram_password@postgres:5432/telegram_news
      - LLM_SENTIMENT_URL=http://llm-light-1:8000/generate
      - LLM_TOPICS_URL=http://llm-light-2:8000/generate
      - LLM_ENTITY_URL=http://llm-light-3:8000/generate
      - USE_LIGHTWEIGHT_LLM=true
      - USE_HEAVYWEIGHT_LLM=false
      - SPARK_DRIVER_MEMORY=6g
      - SPARK_EXECUTOR_MEMORY8g
    volumes:
      - ./jars:/app/jars
      - ivy-cache:/root/.ivy2
    env_file:
      - .env
    networks:
      - telegram_news_network

  api:
    build:
      context: ./src/api
      dockerfile: Dockerfile
    container_name: telegram-news-api
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "5050:5000"
    env_file:
      - .env
    networks:
      - telegram_news_network

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: telegram-news-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      api:
        condition: service_started
    env_file:
      - .env
    networks:
      - telegram_news_network

networks:
  telegram_news_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
  mongodb_data:
  elasticsearch_data:
  telegram_sessions:
  spark-master-logs:
  spark-worker-logs:
  spark-checkpoints:
  models:
  ivy-cache: